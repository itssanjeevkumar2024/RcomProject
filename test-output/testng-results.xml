<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="26" passed="22" failed="1" skipped="3">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-10-06T05:36:36 EDT" name="Suite" finished-at="2024-10-06T05:40:02 EDT" duration-ms="205923">
    <groups>
    </groups>
    <test started-at="2024-10-06T05:36:36 EDT" name="Test1" finished-at="2024-10-06T05:38:17 EDT" duration-ms="101012">
      <class name="SignIn_Flow_Automation.DataDrivernFromExcel">
        <test-method is-config="true" signature="ApplicationLaunch()[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:36:36 EDT" name="ApplicationLaunch" finished-at="2024-10-06T05:36:58 EDT" duration-ms="22021" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApplicationLaunch -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:36:58 EDT" name="setUp" finished-at="2024-10-06T05:36:58 EDT" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:36:58 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:36:58 EDT" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Delhi]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:36:58 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:01 EDT" duration-ms="2783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:01 EDT" name="setUp" finished-at="2024-10-06T05:37:01 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:01 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:01 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Mumbai]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:01 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:01 EDT" duration-ms="270" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:01 EDT" name="setUp" finished-at="2024-10-06T05:37:01 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:01 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:01 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Ghaziabad]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:01 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:02 EDT" duration-ms="225" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="setUp" finished-at="2024-10-06T05:37:02 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:02 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Lucknow]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:02 EDT" duration-ms="315" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="setUp" finished-at="2024-10-06T05:37:02 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:02 EDT" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Banarash]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:02 EDT" duration-ms="192" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="setUp" finished-at="2024-10-06T05:37:02 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:02 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Baghpat]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:02 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:05 EDT" duration-ms="2958" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="setUp" finished-at="2024-10-06T05:37:05 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:05 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Sonipat]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:05 EDT" duration-ms="186" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="setUp" finished-at="2024-10-06T05:37:05 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:05 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Panipat]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:05 EDT" duration-ms="208" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="setUp" finished-at="2024-10-06T05:37:05 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:05 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:06 EDT" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Chandigarh]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:06 EDT" duration-ms="203" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="setUp" finished-at="2024-10-06T05:37:06 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:06 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Mohalli]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:06 EDT" duration-ms="169" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="setUp" finished-at="2024-10-06T05:37:06 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:06 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers11]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Jabalpur]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:06 EDT" duration-ms="184" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="setUp" finished-at="2024-10-06T05:37:06 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:06 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Bhopal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:06 EDT" duration-ms="197" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="setUp" finished-at="2024-10-06T05:37:06 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:06 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[13.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers13]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Shadol]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:06 EDT" duration-ms="169" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:06 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[14.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers14]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Indore]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="setUp" finished-at="2024-10-06T05:37:06 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:06 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:07 EDT" duration-ms="168" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:07 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[15.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers15]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Faridabad]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="setUp" finished-at="2024-10-06T05:37:07 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:07 EDT" duration-ms="184" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="setUp" finished-at="2024-10-06T05:37:07 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:07 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[16.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers16]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Noida]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:07 EDT" duration-ms="184" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="setUp" finished-at="2024-10-06T05:37:07 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:07 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[17.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers17]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Shamli]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:07 EDT" duration-ms="199" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="setUp" finished-at="2024-10-06T05:37:07 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:07 EDT" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[18.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers18]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Nanital]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:07 EDT" duration-ms="190" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="setUp" finished-at="2024-10-06T05:37:07 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:07 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers19]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Dheradoon]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:07 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:08 EDT" duration-ms="200" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:08 EDT" name="setUp" finished-at="2024-10-06T05:37:08 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:08 EDT" name="PrintExcelData" data-provider="getData" finished-at="2024-10-06T05:37:08 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Rogers20]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Panchkulla]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrintExcelData -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:08 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:08 EDT" duration-ms="185" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PrintExcelData status=SUCCESS method=DataDrivernFromExcel.PrintExcelData(double,java.lang.String,java.lang.String)[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="AppClosure()[pri:0, instance:SignIn_Flow_Automation.DataDrivernFromExcel@2767e23c]" started-at="2024-10-06T05:37:08 EDT" name="AppClosure" finished-at="2024-10-06T05:37:12 EDT" duration-ms="4041" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AppClosure -->
      </class> <!-- SignIn_Flow_Automation.DataDrivernFromExcel -->
      <class name="SignIn_Flow_Automation.SAI_NAC_Flow">
        <test-method is-config="true" signature="ApplicationLaunch()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:37:12 EDT" name="ApplicationLaunch" finished-at="2024-10-06T05:37:26 EDT" duration-ms="13823" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApplicationLaunch -->
        <test-method signature="ShopInternet()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:37:26 EDT" name="ShopInternet" finished-at="2024-10-06T05:37:57 EDT" duration-ms="31798" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ShopInternet -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:37:26 EDT" name="setUp" finished-at="2024-10-06T05:37:26 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SAI_NAC_Flow.ShopInternet()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:37:57 EDT" name="getSceenShot" finished-at="2024-10-06T05:37:59 EDT" duration-ms="1477" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ShopInternet status=SUCCESS method=SAI_NAC_Flow.ShopInternet()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method signature="Serviceability()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:37:59 EDT" name="Serviceability" finished-at="2024-10-06T05:38:08 EDT" depends-on-methods="SignIn_Flow_Automation.SAI_NAC_Flow.ShopInternet" duration-ms="8963" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Serviceability -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:37:59 EDT" name="setUp" finished-at="2024-10-06T05:37:59 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SAI_NAC_Flow.Serviceability()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:38:08 EDT" name="getSceenShot" finished-at="2024-10-06T05:38:08 EDT" duration-ms="154" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Serviceability status=SUCCESS method=SAI_NAC_Flow.Serviceability()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method is-config="true" signature="AppClosure()[pri:0, instance:SignIn_Flow_Automation.SAI_NAC_Flow@1750fbeb]" started-at="2024-10-06T05:38:08 EDT" name="AppClosure" finished-at="2024-10-06T05:38:17 EDT" duration-ms="9136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AppClosure -->
      </class> <!-- SignIn_Flow_Automation.SAI_NAC_Flow -->
    </test> <!-- Test1 -->
    <test started-at="2024-10-06T05:38:17 EDT" name="Test2" finished-at="2024-10-06T05:40:02 EDT" duration-ms="104848">
      <class name="SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E">
        <test-method is-config="true" signature="suiteSetup()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:36:36 EDT" name="suiteSetup" finished-at="2024-10-06T05:36:36 EDT" duration-ms="581" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteSetup -->
        <test-method is-config="true" signature="ApplicationLaunch()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:38:17 EDT" name="ApplicationLaunch" finished-at="2024-10-06T05:38:29 EDT" duration-ms="11735" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApplicationLaunch -->
        <test-method is-config="true" signature="setUpExtentTestObject(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:38:29 EDT" name="setUpExtentTestObject" finished-at="2024-10-06T05:38:29 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SAI_SAI_DTG_HTO_Flow_Automation_E2E.LoginInToRogersWebsite()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpExtentTestObject -->
        <test-method signature="LoginInToRogersWebsite()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:38:29 EDT" name="LoginInToRogersWebsite" finished-at="2024-10-06T05:39:57 EDT" duration-ms="88170" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//span[text()=" Try Again "]"}
  (Session info: chrome=129.0.6668.90)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.25.0', revision: '8a8aea2337'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [57515e7ec87dadab89a449a04b13d076, findElement {using=xpath, value=//span[text()=" Try Again "]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 129.0.6668.90, chrome: {chromedriverVersion: 129.0.6668.89 (951c0b97221f..., userDataDir: C:\Users\SANJEE~1.KUM\AppDa...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51038}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51038/devtoo..., se:cdpVersion: 129.0.6668.90, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 57515e7ec87dadab89a449a04b13d076]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//span[text()=" Try Again "]"}
  (Session info: chrome=129.0.6668.90)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.25.0', revision: '8a8aea2337'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [57515e7ec87dadab89a449a04b13d076, findElement {using=xpath, value=//span[text()=" Try Again "]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 129.0.6668.90, chrome: {chromedriverVersion: 129.0.6668.89 (951c0b97221f..., userDataDir: C:\Users\SANJEE~1.KUM\AppDa...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51038}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51038/devtoo..., se:cdpVersion: 129.0.6668.90, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 57515e7ec87dadab89a449a04b13d076
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:545)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:368)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:362)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy20.click(Unknown Source)
at webPages.HomePage.LoginToRogersApplication(HomePage.java:92)
at SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.LoginInToRogersWebsite(SAI_SAI_DTG_HTO_Flow_Automation_E2E.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginInToRogersWebsite -->
        <test-method is-config="true" signature="getSceenShot(org.testng.ITestResult)[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:39:57 EDT" name="getSceenShot" finished-at="2024-10-06T05:39:57 EDT" duration-ms="254" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginInToRogersWebsite status=FAILURE method=SAI_SAI_DTG_HTO_Flow_Automation_E2E.LoginInToRogersWebsite()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSceenShot -->
        <test-method signature="ENSLaunch()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:39:57 EDT" name="ENSLaunch" finished-at="2024-10-06T05:39:57 EDT" depends-on-methods="SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.LoginInToRogersWebsite" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.ENSLaunch() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17 depends on not successfully finished methods 
[SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.LoginInToRogersWebsite() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.ENSLaunch() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17 depends on not successfully finished methods 
[SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.LoginInToRogersWebsite() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:159)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ENSLaunch -->
        <test-method signature="SignInToENSPortal()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:39:57 EDT" name="SignInToENSPortal" finished-at="2024-10-06T05:39:57 EDT" depends-on-methods="SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.ENSLaunch" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.SignInToENSPortal() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17 depends on not successfully finished methods 
[SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.ENSLaunch() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.SignInToENSPortal() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17 depends on not successfully finished methods 
[SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.ENSLaunch() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:159)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SignInToENSPortal -->
        <test-method signature="SearchEmailInENS()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:39:57 EDT" name="SearchEmailInENS" finished-at="2024-10-06T05:39:57 EDT" depends-on-methods="SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.SignInToENSPortal" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.SearchEmailInENS() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17 depends on not successfully finished methods 
[SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.SignInToENSPortal() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.SearchEmailInENS() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17 depends on not successfully finished methods 
[SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E.SignInToENSPortal() on instance SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:159)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchEmailInENS -->
        <test-method is-config="true" signature="AppClosure()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:39:57 EDT" name="AppClosure" finished-at="2024-10-06T05:40:02 EDT" duration-ms="4645" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AppClosure -->
        <test-method is-config="true" signature="ReportFlush()[pri:0, instance:SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E@17bffc17]" started-at="2024-10-06T05:40:02 EDT" name="ReportFlush" finished-at="2024-10-06T05:40:04 EDT" duration-ms="2052" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ReportFlush -->
      </class> <!-- SignIn_Flow_Automation.SAI_SAI_DTG_HTO_Flow_Automation_E2E -->
    </test> <!-- Test2 -->
  </suite> <!-- Suite -->
</testng-results>
